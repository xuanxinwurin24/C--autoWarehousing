<CIM:CustomWindow x:Class="CIM.View.fmCarousel"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
	xmlns:local="clr-namespace:CIM.View" 
	xmlns:CIM="clr-namespace:CIM" 
	mc:Ignorable="d" 
	Title="Carousel" Height="768" Width="1366" Background="SkyBlue"				  
	ResizeMode="NoResize" WindowStartupLocation="CenterOwner" ShowInTaskbar="False" Closed="CustomWindow_Closed">
	<Window.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="/CIM;component/Lib/MyDictionary.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<SolidColorBrush x:Key="Empty.Cell.Background" Color="White"/>
			<SolidColorBrush x:Key="Existed.Cell.Background" Color="Lime"/>
			<SolidColorBrush x:Key="Locked.Cell.Background" Color="Red"/>
			<SolidColorBrush x:Key="DataLost.Cell.Background" Color="Yellow"/>
			<SolidColorBrush x:Key="DataNG.Cell.Background" Color="MediumPurple"/>
			<SolidColorBrush x:Key="WaitIn.Cell.Background" Color="DarkGray"/>
			<SolidColorBrush x:Key="None.Cell.Background" Color="Black"/>
			<Style TargetType="CIM:CustomWindow">
				<Setter Property="FontSize" Value="50" />
			</Style>
			<Style TargetType="{x:Type Button}" BasedOn="{StaticResource GrayScaleButtonStyle}">
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border Background="{TemplateBinding Background}" 
										BorderBrush="Transparent" BorderThickness="0" SnapsToDevicePixels="true">
								<Border x:Name="border" Background="{TemplateBinding Background}" 
										BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
									<TextBlock Text="{TemplateBinding Content}" x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
								</Border>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="true">
									<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
									<!--<Setter Property="BorderThickness" TargetName="border" Value="2"/>-->
								</Trigger>
								<Trigger Property="IsPressed" Value="true">
									<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
									<!--<Setter Property="BorderThickness" TargetName="border" Value="2"/>-->
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
									<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<EventSetter Event="Click" Handler="Cell_info_button_Click" />
				<Setter Property="Background" Value="{StaticResource None.Cell.Background}"/>
				<Style.Triggers>
					<DataTrigger Binding = "{Binding STATUS}" Value = "0">
						<Setter Property = "Background" Value="{StaticResource Empty.Cell.Background}"/>
					</DataTrigger>
					<DataTrigger Binding = "{Binding STATUS}" Value = "1">
						<Setter Property = "Background" Value="{StaticResource Existed.Cell.Background}"/>
					</DataTrigger>
					<DataTrigger Binding = "{Binding STATUS}" Value = "2">
						<Setter Property = "Background" Value="{StaticResource Locked.Cell.Background}"/>
					</DataTrigger>
					<DataTrigger Binding = "{Binding STATUS}" Value = "3">
						<Setter Property = "Background" Value="{StaticResource DataLost.Cell.Background}"/>
					</DataTrigger>
					<DataTrigger Binding = "{Binding STATUS}" Value = "4">
						<Setter Property = "Background" Value="{StaticResource DataNG.Cell.Background}"/>
					</DataTrigger>
					<DataTrigger Binding = "{Binding STATUS}" Value = "5">
						<Setter Property = "Background" Value="{StaticResource WaitIn.Cell.Background}"/>
					</DataTrigger>
				</Style.Triggers>
			</Style>
		</ResourceDictionary>
	</Window.Resources>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="auto" />
			<RowDefinition Height="auto" />
			<RowDefinition Height="*" />
		</Grid.RowDefinitions>
		<WrapPanel HorizontalAlignment="Center" Margin="0 10 0 0" Grid.Row="0" >
			<WrapPanel.Resources>
				<Style TargetType="StackPanel">
					<Setter Property="Margin" Value="7 5" />
					<Setter Property="Orientation" Value="Horizontal" />
				</Style>
				<Style TargetType="Label">
					<Setter Property="FontSize" Value="16" />
					<Setter Property="VerticalAlignment" Value="Center" />
					<Setter Property="HorizontalContentAlignment" Value="Center" />
				</Style>
				<Style TargetType="Button">
					<Setter Property="Width" Value="60" />
					<Setter Property="Height" Value="28" />
					<Setter Property="Margin" Value="7 5" />
					<Setter Property="IsHitTestVisible" Value="False" />
				</Style>
			</WrapPanel.Resources>
			<StackPanel>
				<Label Content="{DynamicResource lang_CellStatus_Empty}" />
				<Button Background="{StaticResource Empty.Cell.Background}" />
			</StackPanel>
			<StackPanel>
				<Label Content="{DynamicResource lang_CellStatus_Existed}" />
				<Button Background="{StaticResource Existed.Cell.Background}" />
			</StackPanel>
			<StackPanel>
				<Label Content="{DynamicResource lang_CellStatus_Locked}" />
				<Button Background="{StaticResource Locked.Cell.Background}" />
			</StackPanel>
			<StackPanel>
				<Label Content="{DynamicResource lang_CellStatus_DataLost}" />
				<Button Background="{StaticResource DataLost.Cell.Background}" />
			</StackPanel>
			<StackPanel>
				<Label Content="{DynamicResource lang_CellStatus_DataNG}" />
				<Button Background="{StaticResource DataNG.Cell.Background}" />
			</StackPanel>
			<StackPanel>
				<Label Content="{DynamicResource lang_CellStatus_WaitIn}" />
				<Button Background="{StaticResource WaitIn.Cell.Background}" />
			</StackPanel>
			<StackPanel Visibility="Collapsed">
				<Label Content="{DynamicResource lang_CellStatus_None}" />
				<Button Background="{StaticResource None.Cell.Background}" />
			</StackPanel>
		</WrapPanel>
		<Separator VerticalAlignment="Top" Grid.Row="1" Margin="30 10"/>
		<ScrollViewer Grid.Row="2" Focusable="False" Margin="0 0 0 10" VerticalAlignment="Center" 
					  HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
			<Grid>
				<WrapPanel x:Name="wrapCell" Grid.Row="2" Margin="0 10" HorizontalAlignment="Center" />
			</Grid>
		</ScrollViewer>
	</Grid>
</CIM:CustomWindow>
